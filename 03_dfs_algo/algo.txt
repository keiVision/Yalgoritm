1. Считываем поступающие данные в следующем формате: n_vertex, n_edge - два целых числа
2. Считываем следующие данные в формате: vertex -> vertex - означают связь вершины с вершиной - два целых числа
3. Создаем список смежности, показывающий связи для каждой ноды (вершины)
    Список основан на типе dict, где каждый key имеет свое множество set() состоящее из элементов связи между вершинами
4. Реализуем рекуррентный алгоритм  dfs() для обхода графа в глубину. (важно учесть сложность алгоритма)
    Под сложностью алгоритма имеется ввиду его скорость обработки. Рекурсивная версия отработает "сложнее" - дольше. Поэтому
    важно учесть следующие моменты:
        - Возможность управления стеком
        - Операции с множествами но внутри цикла, а не при вызове вложенной функции
Вариант 1 (Рекурсия):
```
def dfs(graph, start, visited=None):
    if visited is None:
        visited = set()
    visited.add(start)
    for next in graph[start] - visited:
        dfs(graph, next, visited)
    return visited
```
Вариант 2 (Итеративный):
```
def dfs(graph, start, visited=None):
    if visited is None:
        visited = set()
    stack = [start]
    while stack:
        vertex = stack.pop()
        if vertex not in visited:
            visited.add(vertex)
            stack.extend(graph[vertex] - visited)
    return visited
```
5. Запускаем и возвращаем ответ. 